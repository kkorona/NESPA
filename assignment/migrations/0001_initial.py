# Generated by Django 3.1.7 on 2021-08-26 08:21

import assignment.models
import django.core.files.storage
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ProblemModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prob_id', models.CharField(max_length=20)),
                ('prob_name', models.CharField(max_length=20)),
                ('document', models.FileField(blank=True, null=True, upload_to=assignment.models.document_upload_path)),
                ('sample_data', models.FileField(blank=True, null=True, upload_to=assignment.models.sample_data_upload_path)),
                ('sub_data', models.FileField(blank=True, null=True, storage=django.core.files.storage.FileSystemStorage(base_url='/assignment', location='/Users/LeeJunYoung/Desktop/NESPA/data/assignment'), upload_to=assignment.models.sub_data_upload_path)),
                ('header_data', models.FileField(blank=True, null=True, storage=django.core.files.storage.FileSystemStorage(base_url='/assignment', location='/Users/LeeJunYoung/Desktop/NESPA/data/assignment'), upload_to=assignment.models.header_data_upload_path)),
                ('starts_at', models.DateTimeField()),
                ('ends_at', models.DateTimeField()),
                ('size_limit', models.IntegerField()),
                ('try_limit', models.IntegerField()),
                ('time_limit', models.FloatField()),
                ('eval', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'problems',
                'ordering': ('prob_id',),
            },
        ),
        migrations.CreateModel(
            name='SubmissionModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_ID', models.CharField(max_length=20)),
                ('client_number', models.CharField(max_length=20)),
                ('prob_ID', models.CharField(max_length=20)),
                ('prob_name', models.CharField(default='-', max_length=20)),
                ('sub_file', models.FileField(null=True, storage=django.core.files.storage.FileSystemStorage(base_url='/submission', location='/Users/LeeJunYoung/Desktop/NESPA/data/submission'), upload_to=assignment.models.submission_upload_path)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('score', models.IntegerField()),
                ('exec_time', models.FloatField()),
                ('code_size', models.IntegerField()),
                ('lang', models.CharField(max_length=20)),
                ('problem', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='assignment.problemmodel')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.vespauser')),
            ],
            options={
                'db_table': 'submissions',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='GradeModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade_input', models.FileField(null=True, storage=django.core.files.storage.FileSystemStorage(base_url='/assignment', location='/Users/LeeJunYoung/Desktop/NESPA/data/assignment'), upload_to=assignment.models.grade_data_upload_path)),
                ('grade_output', models.FileField(null=True, storage=django.core.files.storage.FileSystemStorage(base_url='/assignment', location='/Users/LeeJunYoung/Desktop/NESPA/data/assignment'), upload_to=assignment.models.grade_data_upload_path)),
                ('problem', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='assignment.problemmodel')),
            ],
        ),
    ]
